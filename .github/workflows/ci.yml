name: CI & Publish

on:
  push:
    branches: [main, master]
    tags: ['v*']     # e.g. v0.1 triggers release and Docker build with baked MODEL_VERSION
  pull_request:

permissions:
  contents: write         # Needed to publish GitHub release
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      # ---- Lint (ruff) ----
      - name: Lint (ruff)
        run: |
          pip install -U pip
          pip install ruff
          ruff check .

      # ---- Install, Train, Unit Tests ----
      - name: Install, Train, Unit Tests
        env:
          MODEL_VERSION: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || '0.1' }}
        run: |
          pip install -r requirements.txt pytest
          python src/train.py --model linear
          PYTHONPATH=$(pwd) pytest -q

      # ---- Verify trained model exists ----
      - name: Verify model file exists
        run: |
          CLEAN_VERSION=${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || '0.1' }}
          CLEAN_VERSION=${CLEAN_VERSION#v}  # remove leading 'v'
          FILE=models/model_v${CLEAN_VERSION}.joblib
          if [ ! -f "$FILE" ]; then
            echo "Model file $FILE not found!"
            exit 1
          fi

      # ---- Upload training artifacts ----
      - name: Upload training artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: |
            artifacts/LinearRegression/model.pkl
            artifacts/LinearRegression/meta.json
            artifacts/LinearRegression/metrics.json
            models/model_v0.1.joblib
            models/feature_list.json
          if-no-files-found: error

      # ---- Docker meta (tags/labels) ----
      - name: Docker meta (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ---- Build (for smoke) ----
      - name: Build (load for smoke)
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          push: false
          tags: local/test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            MODEL_VERSION=${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || '0.1' }}

      # ---- Smoke test container ----
      - name: Smoke test
        shell: bash
        run: |
          set -euo pipefail
          CID=smoke
          docker run -d --name "$CID" -p 8000:8000 local/test:latest
          trap 'docker logs "$CID" || true; docker rm -f "$CID" || true' EXIT
          for i in {1..30}; do
            if curl -fsS http://localhost:8000/health >/dev/null; then
              echo "Healthcheck OK"
              exit 0
            fi
            sleep 1
          done
          echo "Healthcheck failed"
          exit 1

      # ---- Login to GHCR ----
      - name: Login to GHCR
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ---- Build & Push Docker image ----
      - name: Build & Push
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            MODEL_VERSION=${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || '0.1' }}

      # ---- Create GitHub Release ----
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            artifacts/LinearRegression/metrics.json
            artifacts/LinearRegression/meta.json